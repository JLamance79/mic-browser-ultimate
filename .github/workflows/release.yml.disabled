name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name || inputs.version }}
        release_name: MIC Browser Ultimate ${{ github.ref_name || inputs.version }}
        body: |
          ## What's Changed
          
          ### New Features
          - Comprehensive page analysis with 8 analysis categories
          - Auto-update system with progress tracking
          - Platform-specific native integrations (Windows/macOS/Linux)
          - Advanced browser controls and navigation
          
          ### Improvements
          - Enhanced performance and stability
          - Better cross-platform compatibility
          - Improved user interface and experience
          
          ### Technical Details
          - Built with Electron ${{ env.ELECTRON_VERSION }}
          - Supports Windows 10+, macOS 10.15+, Ubuntu 18.04+
          - Auto-updater integration for seamless updates
          
          ## Installation
          
          ### Windows
          Download and run `MIC-Browser-Ultimate-Setup-${{ github.ref_name || inputs.version }}.exe`
          
          ### macOS
          Download and mount `MIC-Browser-Ultimate-${{ github.ref_name || inputs.version }}.dmg`
          
          ### Linux
          Download and install:
          - `MIC-Browser-Ultimate-${{ github.ref_name || inputs.version }}.AppImage` (Universal)
          - `mic-browser-ultimate_${{ github.ref_name || inputs.version }}_amd64.deb` (Debian/Ubuntu)
          - `mic-browser-ultimate-${{ github.ref_name || inputs.version }}.x86_64.rpm` (RedHat/Fedora)
        draft: false
        prerelease: false

  build-and-release:
    name: Build and Release on ${{ matrix.os }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win
          - os: macos-latest
            platform: mac
            
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Get Electron version
      id: electron-version
      run: |
        VERSION=$(node -p "require('./node_modules/electron/package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "ELECTRON_VERSION=$VERSION" >> $GITHUB_ENV
      shell: bash
      
    - name: Build and package application
      run: npm run build:release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ELECTRON_CACHE: ${{ runner.temp }}/electron-cache
        ELECTRON_BUILDER_CACHE: ${{ runner.temp }}/electron-builder-cache
        
    - name: Upload Windows artifacts
      if: matrix.platform == 'win'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/MIC Browser Ultimate Setup.exe
        asset_name: MIC-Browser-Ultimate-Setup-${{ github.ref_name || inputs.version }}.exe
        asset_content_type: application/octet-stream
        
    - name: Upload Windows portable
      if: matrix.platform == 'win'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/MIC Browser Ultimate.exe
        asset_name: MIC-Browser-Ultimate-Portable-${{ github.ref_name || inputs.version }}.exe
        asset_content_type: application/octet-stream
        
    - name: Upload macOS DMG
      if: matrix.platform == 'mac'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/MIC Browser Ultimate.dmg
        asset_name: MIC-Browser-Ultimate-${{ github.ref_name || inputs.version }}.dmg
        asset_content_type: application/octet-stream
        
    - name: Upload Linux AppImage
      if: matrix.platform == 'linux'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/MIC Browser Ultimate.AppImage
        asset_name: MIC-Browser-Ultimate-${{ github.ref_name || inputs.version }}.AppImage
        asset_content_type: application/octet-stream
        
    - name: Upload Linux DEB
      if: matrix.platform == 'linux'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/mic-browser-ultimate.deb
        asset_name: mic-browser-ultimate_${{ github.ref_name || inputs.version }}_amd64.deb
        asset_content_type: application/octet-stream
        
    - name: Upload Linux RPM
      if: matrix.platform == 'linux'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/mic-browser-ultimate.rpm
        asset_name: mic-browser-ultimate-${{ github.ref_name || inputs.version }}.x86_64.rpm
        asset_content_type: application/octet-stream

  update-release-files:
    name: Update Release Files
    needs: [create-release, build-and-release]
    runs-on: ubuntu-latest
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate release files
      run: node build-release.js
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: ${{ github.ref_name || inputs.version }}
        
    - name: Upload latest-win32.yml
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./releases/latest-win32.yml
        asset_name: latest-win32.yml
        asset_content_type: text/yaml
        
    - name: Upload latest-darwin.yml
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./releases/latest-darwin.yml
        asset_name: latest-darwin.yml
        asset_content_type: text/yaml
        
    - name: Upload latest-linux.yml
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./releases/latest-linux.yml
        asset_name: latest-linux.yml
        asset_content_type: text/yaml