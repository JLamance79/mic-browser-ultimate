name: Build and Release

# Only trigger on version tags or manual dispatch
on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0.0, v20.15.10
  workflow_dispatch: # Allow manual trigger

env:
  ELECTRON_CACHE: ~/.cache/electron
  ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

jobs:
  # Simple test job first
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Debug - Check repository state
        run: |
          echo "Current directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo "Looking for package-lock.json:"
          find . -name "package-lock.json" -type f || echo "No package-lock.json found"
          echo "Git status:"
          git status --porcelain || echo "No git changes"
        shell: bash

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            echo "Found package-lock.json, trying npm ci"
            echo "File size: $(wc -c < package-lock.json) bytes"
            echo "First line: $(head -1 package-lock.json)"
            if npm ci --verbose; then
              echo "✅ npm ci succeeded"
            else
              echo "❌ npm ci failed, falling back to npm install"
              rm -f package-lock.json
              npm install --verbose
            fi
          else
            echo "No package-lock.json found, using npm install"
            npm install --verbose
          fi
        shell: bash

      - name: Run tests
        run: npm test

  # Only build if we have a version tag
  build:
    needs: test
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libgtk-3-dev libxss1

      - name: Debug - Check repository state
        run: |
          echo "Current directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo "Looking for package-lock.json:"
          find . -name "package-lock.json" -type f || echo "No package-lock.json found"
          echo "Git status:"
          git status --porcelain || echo "No git changes"
        shell: bash

      - name: Install dependencies
        run: |
          echo "Checking for package-lock.json..."
          ls -la package-lock.json || echo "package-lock.json not found"
          if [ -f package-lock.json ]; then
            echo "Found package-lock.json, trying npm ci"
            echo "File size: $(wc -c < package-lock.json) bytes"
            echo "First line: $(head -1 package-lock.json)"
            if npm ci --verbose; then
              echo "✅ npm ci succeeded"
            else
              echo "❌ npm ci failed, falling back to npm install"
              rm -f package-lock.json
              npm install --verbose
            fi
          else
            echo "No package-lock.json found, using npm install"
            npm install --verbose
          fi
        shell: bash

      - name: Prepare build environment
        run: |
          # Create basic assets directory if missing
          mkdir -p assets
          echo "Build environment prepared"
        shell: bash

      - name: Build application
        run: npm run build:ci
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true

      - name: List build outputs
        run: |
          echo "Build completed. Checking outputs:"
          ls -la dist/ || echo "No dist directory found"
        shell: bash

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            dist/*.dmg
            dist/*.zip
            dist/latest-mac.yml
        continue-on-error: true

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/latest-linux.yml
        continue-on-error: true

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            dist/*.exe
            dist/*.msi
            dist/latest.yml
        continue-on-error: true

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -la || echo "No artifacts found"
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *-build/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}